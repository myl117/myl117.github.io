<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker on ( â€¢â€“â€¢) Mo Codes</title>
    <link>/blog/docker/</link>
    <description>Recent content in Docker on ( â€¢â€“â€¢) Mo Codes</description>
    <generator>Hugo</generator>
    <language>en-US</language>
    <copyright>Copyright Â© 2020, Jane Doe.</copyright>
    <lastBuildDate>Fri, 05 Sep 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="/blog/docker/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Deploying Our Fantasy Ledger to the Cloud</title>
      <link>/deploying-our-fantasy-ledger-to-the-cloud/</link>
      <pubDate>Fri, 05 Sep 2025 00:00:00 +0000</pubDate>
      <guid>/deploying-our-fantasy-ledger-to-the-cloud/</guid>
      <description>&lt;p&gt;Previously, we built a fantasy ledger application in Java Spring Boot, whipped up a frontend and hooked it up to an in-memory SQL database all while sticking to the principles of MVC.&lt;/p&gt;&#xA;&lt;p&gt;That&amp;rsquo;s great and all, but the only way to actually interact with our app is by running it locally, which can be a bit of a hassle ðŸ¤¦ to set up every time. We want our creation to be accessible from every corner of the realm ðŸŒŽ, not just a single device. Today, we&amp;rsquo;re going to fix that by dockerising our application and launching it on a cloud platform called &lt;a href=&#34;http://fly.io&#34;&gt;Fly.io&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Building a Tiny Cron Scheduler With Go</title>
      <link>/building-a-tiny-cron-scheduler-with-go/</link>
      <pubDate>Tue, 19 Aug 2025 00:00:00 +0000</pubDate>
      <guid>/building-a-tiny-cron-scheduler-with-go/</guid>
      <description>&lt;p&gt;If you&amp;rsquo;re anything like me, you&amp;rsquo;ve probably got a bunch of scheduled tasks running in the cloud whether it&amp;rsquo;s automation, IoT projects, data processing or just random experiments. My go-to approach has been to dockerize mini servers and deploy them on platforms like GCP or AWS. But getting something up and running on Cloud Run or Lambda isn&amp;rsquo;t as lightweight as it sounds. You still need to push images to a registry, wire up an API gateway and set up a scheduler like Cloud Scheduler on GCP.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
